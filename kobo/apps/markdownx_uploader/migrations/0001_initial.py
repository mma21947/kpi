# Generated by Django 3.2.15 on 2023-06-06 17:31

import private_storage.fields
import private_storage.storage.s3boto3
from django.db import migrations, models
from django.core.paginator import Paginator


def copy_from_in_app_message_to_markdownx_uploader(apps, schema_editor):

    InAppMessageFile = apps.get_model('help', 'InAppMessageFile')  # noqa
    MarkdownxUploaderFile = apps.get_model('markdownx_uploader', 'MarkdownxUploaderFile')  # noqa

    page_size = 10000
    paginator = Paginator(
        InAppMessageFile.objects.values('content').order_by('pk'),
        page_size,
    )
    for page in paginator.page_range:
        uploaded_files = paginator.page(page).object_list
        MarkdownxUploaderFile.objects.bulk_create(
            [
                MarkdownxUploaderFile(
                    content=uploaded_file['content']
                )
                for uploaded_file in uploaded_files
            ],
        )


def copy_from_markdownx_uploader_to_in_app_message(apps, schema_editor):

    InAppMessageFile = apps.get_model('help', 'InAppMessageFile')  # noqa
    MarkdownxUploaderFile = apps.get_model('markdownx_uploader', 'MarkdownxUploaderFile')  # noqa

    page_size = 10000
    paginator = Paginator(
        MarkdownxUploaderFile.objects.values('content').order_by('pk'),
        page_size,
    )
    for page in paginator.page_range:
        uploaded_files = paginator.page(page).object_list
        InAppMessageFile.objects.bulk_create(
            [
                InAppMessageFile(
                    content=uploaded_file['content']
                )
                for uploaded_file in uploaded_files
            ],
            ignore_conflicts=True
        )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('help', '0002_inappmessage_always_display_as_new'),
    ]

    operations = [
        migrations.CreateModel(
            name='MarkdownxUploaderFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', private_storage.fields.PrivateFileField(storage=private_storage.storage.s3boto3.PrivateS3BotoStorage(), upload_to='__markdown_media_files/%Y/%m/%d')),
            ],
        ),
        migrations.RunPython(
            copy_from_in_app_message_to_markdownx_uploader,
            copy_from_markdownx_uploader_to_in_app_message,
        )
    ]
